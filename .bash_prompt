#!/usr/bin/env bash

# if [ -f `which powerline-daemon` ]; then
#   powerline-daemon -q
#   POWERLINE_BASH_CONTINUATION=1
#   POWERLINE_BASH_SELECT=1
#   source $(python3 -c 'import site; print(site.USER_BASE)')/lib/python/site-packages/powerline/bindings/bash/powerline.sh
# fi

# Git branch in prompt.
prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
				git update-index --really-refresh -q &> /dev/null;
			fi;

			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s="[${s}]";

		echo -e "${1}${green}(${branchName})${blue}${s}";

	else
		return;
	fi;
}

# Set color shortcuts
bold='';
reset="\\033[0m";
black="\\033[1;30m";
red="\\033[1;31m";
green="\\033[1;32m";
yellow="\\033[1;33m";
blue="\\033[1;34m";
magenta="\\033[1;35m";
cyan="\\033[1;36m";
white="\\033[1;37m";

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${blue}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${cyan}";
else
	hostStyle="${cyan}";
fi;

PS1="\\[${userStyle}\\]\\u"; # username
PS1+="\\[${white}\\]@"; # @
PS1+="\\[${hostStyle}\\]\\h"; # host
PS1+="\\[${white}\\]:"; # :
PS1+="\\[${white}\\]\\W"; # short working directory
PS1+="\$(prompt_git \"${white} \")"; # git repository details
PS1+="\\[${white}\\] \$ \\[${reset}\\]"; # `$` (and reset color)
export PS1;

PS2="\\[${yellow}\\]→ \\[${reset}\\]";
export PS2;